{
  var context = {};
}

Token = Comment* e:Entity Comment* { return e; }

Entity = _ id:ObjectId t:Type? attributes:Object {
  var children = null;
  if (attributes.children) {
    children = attributes.children;
    delete attributes.children;
  }
  var result = {
    id: id,
    type: t,
    attributes: attributes
  };
  if (children) result.children = children;
  return result;
}

Type = _ "(" _ name:Identifier _ ")" { return name; }
 
Object = _ "{" _ res:(Properties) _ "}" { return res; }

Properties = props:CSProperties* {
  var result = {
  };
  if (props.length) {
    for (var i = 0; i < props.length; i++) {
      if (props[i].attributes) {
        if (!result.children) result.children = {};
        result.children[props[i].id] = props[i];
        continue;
      }
      result[props[i].id] = props[i].val;
    }
    return result;
  }
  return result;
}

CSProperties = Comment* p:(Attribute) (_","_)? Comment* { return p; }
CSEntities = Comment* e:(Entity) (_","_)? Comment* { return e; }

Attribute = Property/Entity

ObjectId = "@" name:Identifier { return name; }

Property = id:(Identifier) _ val:(Value/Object) {
  return {
    id: id,
    val: val
  }
}

Comment = _ "/*" (!"*/" .)* "*/" _ { return null }

Variable = "$" name:Identifier { return context[name] || { reference: name }; }

Value = String / Float / Integer / Variable

String = SingleQuoteString / DoubleQuoteString
DoubleQuoteString = "\"" str:NotQuote* "\"" { return str.join(''); }
SingleQuoteString = "'" str:NotSingleQuote* "'" { return str.join(''); }

NotQuote
  = !'"' char: . {return char}
  
NotSingleQuote
  = !"'" char: . {return char}

Identifier = [a-zA-Z_][a-zA-Z_\-0-9]* { return text() }

Float = [0-9]+ "." [0-9]+ { return parseFloat(text()) }

Integer "integer"
  = [0-9]+ { return parseInt(text(), 10); }
  
space = [ \t\n\r]

EOF = ! .

_ "whitespace"
  = [ \t\n\r]*